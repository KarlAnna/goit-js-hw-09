{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAaC,SAASC,cAAc,qBACpCC,EAAYF,SAASC,cAAc,oBACnCE,EAAcH,SAASC,cAAc,sBACrCG,EAAOJ,SAASC,cAAc,QAChCI,EAAa,KAejBD,EAAKE,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAEC,iBACF,IAAIC,EAAQV,EAAWW,MACjBC,EAASR,EAAYO,MACvBE,EAAOV,EAAUQ,MAEjBG,EAAO,EACPC,EAAIC,OAAON,GACXO,EAAID,OAAOH,GACfP,EAAaY,aAAY,WAxB3B,IAAuBC,EAAUC,EAyBvBN,GAAQF,IAzBKO,EA6BnBL,GAAQ,EA7BqBM,EA8BPL,EA7BjB,IAAIM,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAACH,WAAUC,UAEnBG,EAAO,CAACJ,WAAUC,S,GAEnBA,E,KAsBEQ,MAAK,SAAAC,G,IAAGV,EAAQU,EAARV,SAAUC,EAAKS,EAALT,MACjBtB,EAAAgC,OAAOC,QAAQ,uBAAwCC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IAE9Da,OAAM,SAAAJ,G,IAAGV,EAAQU,EAARV,SAAUC,EAAKS,EAALT,MAClBtB,EAAAgC,OAAOI,QAAQ,sBAAqCF,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IAEhEL,GAAKE,GAXDkB,cAAc7B,E,GAYfO,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst delayInput = document.querySelector('input[name=delay]')\nconst stepInput = document.querySelector('input[name=step]')\nconst amountInput = document.querySelector('input[name=amount]')\nconst form = document.querySelector('form')\nlet intervalId = null\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay})\n      } else {\n        reject({position, delay})\n      }\n    }, delay)\n  })\n}\n\nform.addEventListener('submit', onFormSubmit)\n\nfunction onFormSubmit(e) {\n  e.preventDefault()\n  let delay = delayInput.value\n  const amount = amountInput.value\n  let step = stepInput.value\n\n  let stop = 0\n  let d = Number(delay)\n  let s = Number(step)\n  intervalId = setInterval(() => {\n      if (stop == amount) {\n        clearInterval(intervalId)\n        return\n      }\n    stop += 1\n      createPromise(stop, d)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n        });\n    d += s\n    }, step);\n}"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$delayInput","document","querySelector","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$form","$ce04d3a99e08e73b$var$intervalId","addEventListener","e","preventDefault","delay1","value","amount","step","stop","d","Number","s","setInterval","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","param","Notify","success","concat","catch","failure","clearInterval"],"version":3,"file":"03-promises.6a1532d6.js.map"}